@page
@model ExerciseVideo.Pages.WorkoutModel
@using ExerciseVideo.Data

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>Workout</title>
    <link href="~/css/bootstrap/bootstrap.min.css" rel="stylesheet" />
    <link href="~/css/site.css" rel="stylesheet" asp-append-version="true" />
</head>

<body class="body">

    <div class="position-absolute start-0 end-50 h-100 d-flex flex-column justify-content-center">

            <p id="spanExercise" class="display-4 text-center">
                Workout Time
            </p>

            <p id="spanTimer" class="display-1 text-center">
                ...
            </p>

            <div class="d-flex justify-content-center">
                <button id="btnStart" class="btn btn-primary btn-lg m-1" onclick="start()">Start</button>
                <button id="btnPause" class="btn-lg disabled m-1" disabled="true" onclick="pause()">Pause</button>
                <button id="btnReset" class="btn-lg disabled m-1" disabled="true" onclick="reset()">Reset</button>
            </div>

    </div>




    <div class="position-absolute top-0 bottom-0 start-50 end-0 overflow-scroll">
    @if (Model.Exercises != null)
    {
        <table class="table table=striped">
            <thead>
                <tr>
                    <th>Exercise</th>
                    <th>Seconds</th>
                </tr>
            </thead>
            <tbody>
                @foreach (Exercise exercise in Model.Exercises)
                {
                    <tr id="@("row"+exercise.Order)">
                        <td>
                            <button id="btnExercise" class="btn btn-link" onclick="goToExercise(@exercise.Order)">@exercise.Name</button>
                        </td>
                        <td>
                            @exercise.Time
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    </div>

    <br />

    

    <br />
    <br />


    

</body>


<script type="text/javascript"> 
    
    const audioTypes = {
        EndExercise: "endExercise",
        SecondTick: "secondTick"
    }
    const modes = {
        Finished: "finished",
        Goto: "goto",
        Pause: "pause",
        Play: "play"
    }

    const soundFilepaths = {
        AudioEndExercise: 'audio/bell.mp3',
        AudioSecondTick: 'audio/tick.mp3'
    }

    var audio = {
        EndExercise: null,
        SecondTick: null
    }
    var audioEnabled = {
        EndExercise: null,
        SecondTick: null,
        SpeakExercise: null,
        SpeakGo: null
    };
    var dots;
    var exercises = new Array();
    var mode;
    var row;
    var seconds;
    var timerExercise;
    var timerTransition;

    window.onload = setup;

    function setup() {
        log("setup");
        buildExerciseArray();
        buildAudio();
        dots = 0;
    }

    var buildAudio = () => {
        
        log("buildAudio");

        audioEnabled.EndExercise = @Model.AudioEndExercise.ToString().ToLower();
        if (audioEnabled.EndExercise == true) {
            audio.EndExercise = new Audio(soundFilepaths.AudioEndExercise);
        }
        
        audioEnabled.SecondTick = @Model.AudioSecondTick.ToString().ToLower();
        if (audioEnabled.SecondTick == true)
        {
            audio.SecondTick = new Audio(soundFilepaths.AudioSecondTick);
        }

        audioEnabled.SpeakExercise = @Model.AudioSpeakExercise.ToString().ToLower();
        audioEnabled.SpeakGo = @Model.AudioSpeakGo.ToString().ToLower(); 
    }

    var buildExerciseArray = () => {

        log("buildExerciseArray");
        @if (Model.Exercises != null)
        {
            @:exercises.push({ Name: "Get Ready...", Time: 3 });
            foreach (var exercise in Model.Exercises)
            {
                @:exercises.push({ Name: "@exercise.Name", Time: "@exercise.Time" });
            }
            @:exercises.push({ Name: "Finished!", Time: 0 });
        }
        if (exercises.length == 0) {
            disableStart();
        }

    }

    var countdown = () => {
        log("countdown:" + row + "|" + seconds);
        updateExerciseDisplay();
        if (seconds == exercises[row].Time && row > 0) {
            speakGo();
        }
        if (seconds == 0) {
            if (@Model.TransitionTime > 0) {
                stopTimerExercise();
            }
            transition();
        }
        else {
            seconds--;
            if (audioEnabled.SecondTick == true) {
                playAudio(audioTypes.SecondTick);
            }
        }
    }
    
    var disableButton = (buttonId) => {
        log("disableButton:" + buttonId);
        document.getElementById(buttonId).disabled = true;
        document.getElementById(buttonId).className = "disabled btn-lg m-1";
    }

    var enableButton = (buttonId) => {
        log("enableButton:" + buttonId);
        document.getElementById(buttonId).disabled = false;
        document.getElementById(buttonId).className = "btn btn-primary btn-lg m-1";
    }

    var finish = () => {
        log("finish");
        mode = modes.Finished;
        stopTimers();
        updateExerciseDisplay();
        enableButton("btnReset");
        disableButton("btnPause");
    }

    var flashEmptyTitle = () => {
        log("flashEmptyTitle");
        document.getElementById("spanExercise").style.color = "white";
        document.getElementById("spanTimer").style.color = "white";
    }

    var flashTemporaryTitle = () => {
        log("flashTemporaryTitle:" + dots);
        if (dots == 3) {
            updateTableDisplay();
            document.getElementById("spanExercise").textContent = exercises[row].Name;
            document.getElementById("spanTimer").textContent = "..." + seconds + "...";
            document.getElementById("spanExercise").style.color = "black";
            document.getElementById("spanTimer").style.color = "black";
        }
        else if (dots == 2) {
            document.getElementById("spanTimer").textContent = ".." + seconds + "..";
        }
        else if (dots == 1) {
            document.getElementById("spanTimer").textContent = "." + seconds + "."; seconds;
        }
        else if (dots == 0) {
            document.getElementById("spanTimer").textContent = seconds;
        }
    }

    var goToExercise = (exerciseId) => {
        log("gotoExercise:" + exerciseId);
        row = (exerciseId + 1);
        seconds = exercises[row].Time;
        dots = 0;
        for (let i = 0; i < exerciseId; i++) {
            document.getElementById("row" + i).className = "table-secondary";
        }
        for (let i = (exerciseId + 1); i < exercises.length - 2; i++) {
            document.getElementById("row" + i).className = "";
        }
        document.getElementById("btnStart").textContent = "Resume";
        pause();
        mode = modes.Goto;
        updateExerciseDisplay();
        updateTableDisplay();
    }

    var log = (entry) => {
        var time = new Date();
        console.log(time.getHours() + ":" + time.getMinutes() + ":" + time.getSeconds() + "." + time.getMilliseconds() + " " + entry);
    }
    
    var pause = () => {
        log("pause");
        mode = modes.Pause;
        stopTimers();
        enableButton("btnStart");
        enableButton("btnReset");
        disableButton("btnPause");
    }

    var playAudio = (sound) => {
        log("playAudio:" + sound);
        if (sound == audioTypes.EndExercise && audioEnabled.EndExercise == true) {
            audio.EndExercise.play();
        }
        if (sound == audioTypes.SecondTick) {
            audio.SecondTick.play();
        }
    }

    var reset = () => {
        log("reset");
        mode = null;
        document.getElementById("btnStart").textContent = "Start";
        enableButton("btnStart");
        disableButton("btnPause");
        disableButton("btnReset");
        resetDisplay();
    }

    var resetDisplay = () => {
        log("resetDisplay");
        document.getElementById("spanExercise").textContent = "Workout Time";
        document.getElementById("spanTimer").textContent = "...";
        for (let i = 0; i < exercises.length - 2; i++) {
                document.getElementById("row" + i).className = "";
            }
    }

    var speakExercise = () => {
        log("speak: " + exercises[row].Name);
        if (audioEnabled.SpeakExercise == true) {
            var utterance = new SpeechSynthesisUtterance(exercises[row].Name);
            speechSynthesis.speak(utterance);
        }
    }

    var speakGo = () => {
        log("speak:go");
        if (audioEnabled.SpeakGo == true) {
            var utterance = new SpeechSynthesisUtterance("Go!");
            speechSynthesis.speak(utterance);
        }

    }

    var start = () => {
       log("start");
        if (mode == null) {
            row = 0;
            seconds = exercises[row].Time;
            document.getElementById("btnStart").textContent = "Resume";
            countdown();
        }
        else if (mode == modes.Goto) {
            countdown();
        }
        mode = modes.Play;
        enableButton("btnPause");
        disableButton("btnReset");
        disableButton("btnStart");
        startTimers();

    }

    var startTimers = () => {
        log("startTimers");
        if (dots == 0) {
            startTimerExercise();
        }
        else {
            startTimerTransition();
        }
    }

    var startTimerExercise = () => {
        log("startTimerExercise");
        timerExercise = setInterval(countdown, 1000);
    }

    var startTimerTransition = () => {
        log("startTimerTransition");
        timerTransition = setInterval(transitionIncrement, @Model.TransitionTime * 0.25 * 1000);
    }

    var stopTimers = () => {
        log("stopTimers");
        stopTimerExercise();
        stopTimerTransition();
    }
    
    var stopTimerExercise = () => {
        log("stopTimerExercise");
        clearInterval(timerExercise);
    }

    var stopTimerTransition = () => {
        log("stopTimerTransition");
        clearInterval(timerTransition);
    }

    var transition = () => {
        log("transition");
        updateExerciseDisplay();
        row++;
        seconds = exercises[row].Time;
        if (row >= exercises.length - 1) {
            finish();
        }
        else if (@Model.TransitionTime > 0) {
            timerTransition = setTimeout(transitionStart, 1000);
        }
        else {
            speakExcersise();
        }
        playAudio(audioTypes.EndExercise);
        
    }

    var transitionIncrement = () =>
    {
        log("transitionIncrement:" + dots);
        if (dots == 3) {
            speakExercise();
        }
        if (dots >= 0) {
            flashTemporaryTitle();
        }
        if (dots == 0) {
            clearInterval(timerTransition);
        }
        if (dots > 0) {
            dots--;
        }
    }

    var transitionStart = () =>
    {
        log("transitionStart");
        flashEmptyTitle();
        startTimerTransition();
        timerExercise = setTimeout(startTimerExercise, @Model.TransitionTime * 1000 - 1000);
        dots = 3;
    }

    var updateExerciseDisplay = () => {
        log("updateExerciseDisplay");
        document.getElementById("spanExercise").textContent = exercises[row].Name;
        document.getElementById("spanTimer").textContent = seconds;
    }

    var updateTableDisplay = () => {
        log("updateTableDisplay");
        if (row > 0 && row < exercises.length - 1) {
            document.getElementById("row" + (row - 1)).className = "table-primary";
        }
        if (row > 1) {
            document.getElementById("row" + (row - 2)).className = "table-secondary";
        }
    }

    </script>
